export type { CollectedSignalData, SignalData } from '@powcaptcha/signals';
import type { CollectedSignalData } from '@powcaptcha/signals';

import type { HeuristicConstants } from './constants';

/**
 * Defines the structure for the result returned by individual heuristic analysis methods.
 */
export interface AnalysisResult {
  /** The change in score determined by this heuristic. */
  scoreDelta: number;
  /** An array of log messages generated by this heuristic. */
  logs: string[];
}

/**
 * Context passed to individual heuristic analyze methods.
 * Can contain results from previous analyses or shared data.
 */
export interface HeuristicContext {
  syntheticClickTimestamps: Set<number>; // Timestamps of clicks identified as potentially synthetic
  // Add other shared analysis results or context if needed later
  [key: string]: unknown;
}

/**
 * Interface for a heuristic analysis source.
 * Each specific analysis logic (timing, keystrokes, paste, etc.) will implement this.
 */
export interface HeuristicSource {
  /** A unique key identifying the heuristic (e.g., 'keystrokes', 'pastePatterns'). */
  readonly key: string;

  /**
   * Performs the specific heuristic analysis.
   * @param data The collected signal data.
   * @param context Shared context, potentially including results from other analyses.
   * @param constants The configuration constants for heuristics.
   * @returns An AnalysisResult object with the score adjustment and relevant logs.
   */
  analyze(
    data: CollectedSignalData,
    context: HeuristicContext,
    constants: HeuristicConstants
  ): AnalysisResult;
}

export interface CalculatedFeatures extends Record<string, boolean | string | number> {
  // Timing & Counts / Temporización y Conteos
  sessionDurationSeconds: number; // Duración de la sesión en segundos
  totalEventCount: number; // Número total de eventos registrados
  pointerMoveCount: number; // Número de eventos pointermove/mousemove/touchmove
  keyDownCount: number; // Número de eventos keydown
  keyUpCount: number; // Número de eventos keyup
  clickCount: number; // Número de eventos click/dblclick
  touchStartCount: number; // Número de eventos touchstart
  focusCount: number; // Número de eventos focus
  blurCount: number; // Número de eventos blur
  inputChangeCount: number; // Número de eventos input/change
  scrollCount: number; // Número de eventos scroll
  visibilityChangeCount: number; // Número de eventos visibilitychange
  clipboardCopyCount: number; // Número de eventos copy
  clipboardPasteCount: number; // Número de eventos paste
  // Pointer/Mouse Metrics / Métricas del Puntero/Ratón
  averagePointerSpeedPixelsPerSecond: number; // Velocidad promedio del puntero (px/s)
  stdDevPointerSpeedPixelsPerSecond: number; // Desviación estándar de la velocidad del puntero
  averagePointerDeltaTimeMs: number; // Delta de tiempo promedio entre movimientos del puntero (ms)
  pointerTypeRatio: number; // Ratio de eventos touch vs mouse (0=solo mouse, 1=solo touch, -1=ninguno)
  totalPointerDistance: number; // Distancia total recorrida por el puntero (px)
  averageClickDurationMs: number; // Duración promedio de los eventos click (ms)
  // Keyboard Metrics / Métricas del Teclado
  averageKeyDownDeltaTimeMs: number; // Delta de tiempo promedio entre keydown (ms)
  stdDevKeyDownDeltaTimeMs: number; // Desviación estándar del delta de tiempo entre keydown
  tabKeyPressCount: number; // Número de veces que se presionó la tecla Tab
  backspaceKeyPressCount: number; // Número de veces que se presionó la tecla Backspace
  enterKeyPressCount: number; // Número de veces que se presionó la tecla Enter
  averageDwellTimeMs: number; // Tiempo promedio de permanencia en un campo de entrada (ms)
  dwellTimeEventCount: number; // Número de eventos de permanencia (focus->blur) en campos de entrada
  // Interaction Metrics / Métricas de Interacción
  distinctTargetInteractionCount: number; // Número de nombres de destino únicos interactuados
  averageFocusDurationMs: number; // Duración promedio entre focus y blur en el mismo elemento (aproximado)
  maxScrollYPosition: number; // Máxima posición de scroll vertical alcanzada
  // Window Metrics / Métricas de la Ventana
  averageViewportWidth: number; // Ancho promedio del viewport (si se registra)
  averageViewportHeight: number; // Alto promedio del viewport (si se registra)

  // —– Fingerprint & Entorno —–
  language: string; // Nuevo: código de idioma (ej. "es-ES")
  os: string; // Nuevo: plataforma (ej. "Win32")
  screenWidth: number | string; // Nuevo: ancho de pantalla (px)
  screenHeight: number | string; // Nuevo: alto de pantalla (px)
  colorDepth: number | string; // Nuevo: profundidad de color (bits)
  timezoneOffset: number | string; // Nuevo: offset de zona horaria (min)
  webglVendor: string; // Nuevo: vendor WebGL
  webglRenderer: string;
}

export interface FingerprintComponentsFeatures {
  browser?: {
    userAgent: string;
    os: string;
    capabilities: Record<string, boolean>;
  };
  language?: {
    language: string;
  };
  screen?: {
    width: number;
    height: number;
    colorDepth: number;
  };
  timezone: {
    timezoneOffset: number;
  };
  webgl?: {
    vendor: string;
    renderer: string;
  };
}
